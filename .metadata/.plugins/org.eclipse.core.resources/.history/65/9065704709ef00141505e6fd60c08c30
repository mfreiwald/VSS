package edu.hm.cs.vss;

public class Seat implements Comparable<Seat> {
	
	public final int nr;
	private final Fork leftFork;
	private final Fork rightFork;
	private Boolean inUse = false;
	
	Seat(int nr, Fork left, Fork right) {
		this.nr = nr;
		this.leftFork = left;
		this.rightFork = right;
	}
	
	
	public void takeForks() {
		
	
		
		// wir brauchen false in der schleife zum weiter machen
		// hasLeft = true && hasRight = true => false
		// !true || !false => false || true => true
		// false || false => true || true => true
		// !true || !true => false || false => false
		boolean isEating = false;

		
		boolean hasLeft = leftFork.tryAcquire();
		boolean hasRight = rightFork.tryAcquire();
		
		if(hasLeft && hasRight) {
			isEating = true;
		}
		
		if(!isEating) {
			if(hasLeft && !hasRight) {
				leftFork.release();
			}
			if(!hasLeft && hasRight) {
				rightFork.release();
			}
		}
		
		
		while(!hasLeft || !hasRight) {
			while(leftFork.tryAcquire()) {
				try {
					if(hasRight) {
						rightFork.release();
						hasRight = false;
					}
					synchronized(leftFork) {
						leftFork.wait();
					}
					
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			if(!hasLeft) {
				leftFork.take();
				hasLeft = true;
			}
			
			while(rightFork.isInUse()) {
				try {
					if(hasLeft) {
						leftFork.release();
						hasLeft = false;
					}
					synchronized(rightFork) {
						rightFork.wait();
					}
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			if(!hasRight) {
				rightFork.take();
				hasRight = true;
			}
		
			
		}
		
	}
	
	public synchronized void releaseForks() {
		leftFork.release();
		rightFork.release();
		
		// notify left and right seat
		
		
		// 		1			2
		// 	schaut AA	
		// 	schaut BB
		//	nimmt AA
		//					schaut BB
		//					schaut CC
		// 					nimmt BB
	}
	

	public boolean sitDown() {
		synchronized(inUse) {
			if(inUse) {
				return false;
			} else {
				inUse = true;
				return true;
			}
		}
	}
	
	public void standUp() {
		synchronized(inUse) {
			inUse = false;
		}
	}
	
	public String toString() {
		return "Seat "+nr;
	}

	@Override
	public int compareTo(Seat o) {
		return this.toString().compareTo(o.toString());
	}
}
